webpackJsonp([15],{1272:function(n,a){n.exports={content:["article",["p","\u88c5\u7bb1(Autoboxing),\u62c6\u7bb1(Unboxing)\u662fJava \u7f16\u8bd1\u5668\u5c06Java\u57fa\u672c\u7c7b\u578b\u4e0e\u5176\u5305\u88c5\u7c7b\u4e4b\u95f4\u8fdb\u884c\u5f7c\u6b64\u8f6c\u5316\u7684\u8fc7\u7a0b\u3002\u4f8b\u5982:"],["pre",{lang:null,highlighted:'    Interger a <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">;   //\u88c5\u7bb1</span>\n    int b <span class="token operator">=</span> a<span class="token comment" spellcheck="true">;         //\u62c6\u7bb1\u8fc7\u7a0b</span>\n\n    Character ch <span class="token operator">=</span> <span class="token string">\'a\'</span><span class="token comment" spellcheck="true">;  //\u88c5\u7bb1</span>\n    char c <span class="token operator">=</span> ch<span class="token comment" spellcheck="true">;         //\u62c6\u7bb1\u8fc7\u7a0b</span>'},["code","    Interger a = 10;   //\u88c5\u7bb1\n    int b = a;         //\u62c6\u7bb1\u8fc7\u7a0b\n\n    Character ch = 'a';  //\u88c5\u7bb1\n    char c = ch;         //\u62c6\u7bb1\u8fc7\u7a0b"]],["h2","\u88c5\u7bb1\u62c6\u7bb1\u539f\u7406"],["p","\u5982\u4e0b\u4ee3\u7801\u7f16\u8bd1\u7684\u65f6\u5019\u4e0d\u4f1a\u62a5\u9519\uff0c\u58f0\u660e\u7684\u7c7b\u578b\u662f",["code","Integer"],", \u6dfb\u52a0\u7684\u662fint\u5374\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u6ca1\u6709\u62a5\u9519\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u7f16\u8bd1\u671f\u95f4\uff0c\u7f16\u8bd1\u5668\u81ea\u52a8\u5c06",["code","int"],"\u8f6c\u5316\u4e3a",["code","Integer"],"\u5bf9\u8c61"],["pre",{lang:null,highlighted:'List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> li <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">; i &lt; 50; i += 2){</span>\n    li<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}\n\nInterger a <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">;   //\u88c5\u7bb1</span>\nint b <span class="token operator">=</span> a<span class="token comment" spellcheck="true">;   </span>'},["code","List<Integer> li = new ArrayList<>();\nfor (int i = 1; i < 50; i += 2){\n    li.add(i);\n}\n\nInterger a = 10;   //\u88c5\u7bb1\nint b = a;   "]],["p","\u5c06\u4ee3\u7801\u53cd\u7f16\u8bd1\u4e4b\u540e\u53d1\u73b0\u5728\u6dfb\u52a0\u5143\u7d20\u7684\u65f6\u5019\u7cfb\u7edf\u4f1a\u81ea\u52a8\u4f7f\u7528",["code","Integer.valueOf(I)"]," \u8fdb\u884c\u8f6c\u5316, \u62c6\u7bb1\u7684\u8fc7\u7a0b\u662fInteger\u5bf9\u8c61\u8c03\u7528",["code","Integer.intValue()"],"\u8fdb\u884c\u8f6c\u6362"],["pre",{lang:null,highlighted:'Compiled from <span class="token string">"AutoBoxing.java"</span>\npublic class io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jetqin<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>AutoBoxing {\n  public io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jetqin<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span><span class="token function">AutoBoxing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    Code<span class="token punctuation">:</span>\n       <span class="token number">0</span><span class="token punctuation">:</span> aload_0\n       <span class="token number">1</span><span class="token punctuation">:</span> invokespecial #<span class="token number">1</span>                  <span class="token operator">/</span><span class="token operator">/</span> Method java<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">.</span><span class="token string">"&lt;init>"</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span>V\n       <span class="token number">4</span><span class="token punctuation">:</span> return\n\n  public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    Code<span class="token punctuation">:</span>\n       <span class="token number">0</span><span class="token punctuation">:</span> bipush        <span class="token number">10</span>\n       <span class="token number">2</span><span class="token punctuation">:</span> invokestatic  #<span class="token number">2</span>                  <span class="token operator">/</span><span class="token operator">/</span> Method java<span class="token operator">/</span>lang<span class="token operator">/</span>Integer<span class="token punctuation">.</span>valueOf<span class="token punctuation">:</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Integer<span class="token comment" spellcheck="true">;</span>\n       <span class="token number">5</span><span class="token punctuation">:</span> astore_1\n       <span class="token number">6</span><span class="token punctuation">:</span> aload_1\n       <span class="token number">7</span><span class="token punctuation">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token operator">/</span><span class="token operator">/</span> Method java<span class="token operator">/</span>lang<span class="token operator">/</span>Integer<span class="token punctuation">.</span>intValue<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span>I\n      <span class="token number">10</span><span class="token punctuation">:</span> istore_2\n      <span class="token number">11</span><span class="token punctuation">:</span> return\n }\n}'},["code",'Compiled from "AutoBoxing.java"\npublic class io.github.jetqin.jvm.AutoBoxing {\n  public io.github.jetqin.jvm.AutoBoxing();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object."<init>":()V\n       4: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: bipush        10\n       2: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n       5: astore_1\n       6: aload_1\n       7: invokevirtual #3                  // Method java/lang/Integer.intValue:()I\n      10: istore_2\n      11: return\n }\n}']],["h2","\u5bf9\u8c61\u6bd4\u8f83"],["p","\u5982\u4e0b\u4ee3\u7801\u7684\u8f93\u51fa\u53ef\u80fd\u548c\u4f60\u60f3\u8c61\u7684\u4e0d\u4e00\u6837, ",["code","c==d"],"\u4e3a true\uff0c ",["code","e==f"]," \u4e3afalse \u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f"],["pre",{lang:null,highlighted:'        Integer a <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;                              </span>\n        Integer b <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">;                              </span>\n        Integer c <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">;                              </span>\n        Integer d <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">;                              </span>\n        Integer e <span class="token operator">=</span> <span class="token number">321</span><span class="token comment" spellcheck="true">;                                </span>\n        Integer f <span class="token operator">=</span> <span class="token number">321</span><span class="token comment" spellcheck="true">;                                </span>\n        Long g <span class="token operator">=</span> 3L<span class="token comment" spellcheck="true">;                                </span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;                   //  true            </span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;                   //  false            </span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;               //  true                </span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;          //  true                    </span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;               //  true                </span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;          //  false                    </span>'},["code","        Integer a = 1;                              \n        Integer b = 2;                              \n        Integer c = 3;                              \n        Integer d = 3;                              \n        Integer e = 321;                                \n        Integer f = 321;                                \n        Long g = 3L;                                \n        System.out.println(c==d);                   //  true            \n        System.out.println(e==f);                   //  false            \n        System.out.println(c==(a+b));               //  true                \n        System.out.println(c.equals(a+b));          //  true                    \n        System.out.println(g==(a+b));               //  true                \n        System.out.println(g.equals(a+b));          //  false                    "]],["p","\u6765\u67e5\u770b\u4e00\u4e0b",["code","Integer"],"\u5bf9\u8c61\u7684\u6e90\u7801\uff0c\u9ed8\u8ba4\u7684\u60c5\u51b5\u4e0b\u5f53\u4e00\u4e2a\u503c\u5728",["code","[-128, 127]"],"\u4e4b\u95f4\uff0c\u5b83\u4f1a\u8fd4\u56de",["code","IntergerCache"],"\u4e2d\u7684\u6570\u503c\uff0c\u5f53\u503c\u5927\u4e8e128\u65f6\u4ed6\u4f1anew\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0ce\u548cf\u90fd\u5927\u4e8e128\u6240\u4ee5\u4ed6\u4eec\u8fd4\u56de\u7684\u662f\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u503c\u4e0d\u76f8\u540c\u3002\u5f53\u5c0f\u4e8e128\u65f6\uff0c\u8fd4\u56de\u7684\u662f",["code","IntergerCache"],"\u4e2d\u7684\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6240\u4ee5\u76f8\u540c\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u6700\u5927\u503c\u662f\u53ef\u4ee5\u901a\u8fc7",["code","java.lang.Integer.IntegerCache.high"],"\u53d8\u91cf\u8bbe\u7f6e\u7684\u3002"],["pre",{lang:null,highlighted:'    private <span class="token keyword">static</span> class IntegerCache {\n        <span class="token keyword">static</span> final int low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token comment" spellcheck="true">;</span>\n        <span class="token keyword">static</span> final int high<span class="token comment" spellcheck="true">;</span>\n        <span class="token keyword">static</span> final Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token keyword">static</span> {\n            <span class="token operator">/</span><span class="token operator">/</span> high value may be configured by property\n            int h <span class="token operator">=</span> <span class="token number">127</span><span class="token comment" spellcheck="true">;</span>\n            String integerCacheHighPropValue <span class="token operator">=</span>\n                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue !<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> {\n                try {\n                    int i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                    i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                    <span class="token operator">/</span><span class="token operator">/</span> Maximum array size is Integer<span class="token punctuation">.</span>MAX_VALUE\n                    h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                } <span class="token function">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> {\n                    <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">If</span> the property cannot be parsed into an int<span class="token punctuation">,</span> ignore it<span class="token punctuation">.</span>\n                }\n            }\n            high <span class="token operator">=</span> h<span class="token comment" spellcheck="true">;</span>\n\n            cache <span class="token operator">=</span> new Integer<span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n            int j <span class="token operator">=</span> low<span class="token comment" spellcheck="true">;</span>\n            <span class="token function">for</span><span class="token punctuation">(</span>int k <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">; k &lt; cache.length; k++)</span>\n                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> new <span class="token function">Integer</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n            <span class="token operator">/</span><span class="token operator">/</span> range <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">]</span> must be interned <span class="token punctuation">(</span>JLS7 <span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">)</span>\n            assert IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token comment" spellcheck="true">;</span>\n        }\n\n        private <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {}\n    }\n\n    public <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span>int i<span class="token punctuation">)</span> {\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;</span><span class="token operator">&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>\n            return IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">;</span>\n        return new <span class="token function">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }'},["code",'    private static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty("java.lang.Integer.IntegerCache.high");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n\n        private IntegerCache() {}\n    }\n\n    public static Integer valueOf(int i) {\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }']],["p","\u5f53\u6211\u4eec\u91cd\u65b0\u4f7f\u7528",["code","-Djava.lang.Integer.IntegerCache.high=500"],"\u8bbe\u7f6e\u6700\u5927\u503c\u7684\u65f6\u5019\uff0c",["code","e==f"],"\u6253\u5370\u51fa\u7684\u7ed3\u679c\u4e3atrue\n",["img",{title:null,src:"./assets/autoboxing.png",alt:"AutoBoxing"}]]],meta:{order:2,title:"Java \u88c5\u7bb1\u62c6\u7bb1",type:"\u5165\u95e8",filename:"docs/java/java-box.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#\u88c5\u7bb1\u62c6\u7bb1\u539f\u7406",title:"\u88c5\u7bb1\u62c6\u7bb1\u539f\u7406"},"\u88c5\u7bb1\u62c6\u7bb1\u539f\u7406"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u5bf9\u8c61\u6bd4\u8f83",title:"\u5bf9\u8c61\u6bd4\u8f83"},"\u5bf9\u8c61\u6bd4\u8f83"]]]}}});