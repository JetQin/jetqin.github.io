webpackJsonp([46],{1304:function(n,s){n.exports={content:["article",["p","\u4e8c\u53c9\u6811\u662f\u6bcf\u4e2a\u7ed3\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u5b50\u6811\u7684\u6811\u7ed3\u6784\u3002\u901a\u5e38\u5b50\u6811\u88ab\u79f0\u4f5c\u201c\u5de6\u5b50\u6811\u201d\uff08left subtree\uff09\u548c\u201c\u53f3\u5b50\u6811\u201d\uff08right subtree\uff09\u3002\u4e8c\u53c9\u6811\u5e38\u88ab\u7528\u4e8e\u5b9e\u73b0\u4e8c\u53c9\u67e5\u627e\u6811\u548c\u4e8c\u53c9\u5806\u3002"],["h2","\u4e8c\u53c9\u6811\u904d\u5386\u7f16\u8f91"],["p","\u904d\u5386\u662f\u5bf9\u6811\u7684\u4e00\u79cd\u6700\u57fa\u672c\u7684\u8fd0\u7b97\uff0c\u6240\u8c13\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u5c31\u662f\u6309\u4e00\u5b9a\u7684\u89c4\u5219\u548c\u987a\u5e8f\u8d70\u904d\u4e8c\u53c9\u6811\u7684\u6240\u6709\u7ed3\u70b9\uff0c\u4f7f\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u800c\u4e14\u53ea\u88ab\u8bbf\u95ee\u4e00\u6b21\u3002\u7531\u4e8e\u4e8c\u53c9\u6811\u662f\u975e\u7ebf\u6027\u7ed3\u6784\uff0c\u56e0\u6b64\uff0c\u6811\u7684\u904d\u5386\u5b9e\u8d28\u4e0a\u662f\u5c06\u4e8c\u53c9\u6811\u7684\u5404\u4e2a\u7ed3\u70b9\u8f6c\u6362\u6210\u4e3a\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\u6765\u8868\u793a\u3002"],["h2","\u5148\u5e8f\u904d\u5386"],["p","\u9996\u5148\u8bbf\u95ee\u6839\uff0c\u518d\u5148\u5e8f\u904d\u5386\u5de6\u5b50\u6811\uff0c\u6700\u540e\u5148\u5e8f\u904d\u5386\u53f3\u5b50\u6811. \u904d\u5386\u8fc7\u7a0b \u6839\u7ed3\u70b9 ---\x3e \u5de6\u5b50\u6811 ---\x3e \u53f3\u5b50\u6811"],["h2","\u4e2d\u5e8f\u904d\u5386"],["p","\u9996\u5148\u4e2d\u5e8f\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u8bbf\u95ee\u6839\uff0c\u6700\u540e\u4e2d\u5e8f\u904d\u5386\u53f3\u5b50\u6811. \u904d\u5386\u8fc7\u7a0b \u5de6\u5b50\u6811---\x3e \u6839\u7ed3\u70b9 ---\x3e \u53f3\u5b50\u6811"],["h2","\u540e\u5e8f\u904d\u5386"],["p","\u9996\u5148\u540e\u5e8f\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u540e\u5e8f\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6700\u540e\u8bbf\u95ee\u6839. \u904d\u5386\u8fc7\u7a0b \u5de6\u5b50\u6811 ---\x3e \u53f3\u5b50\u6811 ---\x3e \u6839\u7ed3\u70b9"],["h2","\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"],["p","\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u5373\u6309\u5c42\u6b21\u4f9d\u6b21\u6253\u5370\u6bcf\u4e00\u5c42\u8282\u70b9\uff0c\u5148\u6253\u5370\u5de6\u5b50\u6811\u8282\u70b9\uff0c\u540e\u6253\u5370\u53f3\u5b50\u6811\u8282\u70b9"],["p",["img",{title:null,src:"./assets/binary-tree.png",alt:"binary tree"}]],["pre",{lang:null,highlighted:'from collections import deque\n\n\nclass Node<span class="token punctuation">:</span>\n    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> lchild<span class="token operator">=</span>None<span class="token punctuation">,</span> rchild<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> lchild\n        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> rchild\n\n    def <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        return <span class="token string">\'Name: %s\'</span> % self<span class="token punctuation">.</span>name\n\n\nclass Tree<span class="token punctuation">:</span>\n\n    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data\n\n    # \u5148\u5e8f\u904d\u5386\n    def <span class="token function">pre_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> node is None<span class="token punctuation">:</span>\n            return node\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">repr</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">pre_order</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">pre_order</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>\n\n    # \u4e2d\u5e8f\u904d\u5386\n    def <span class="token function">middle_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> node is None<span class="token punctuation">:</span>\n            return node\n        self<span class="token punctuation">.</span><span class="token function">middle_order</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">repr</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">middle_order</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>\n\n    # \u540e\u5e8f\u904d\u5386\n    def <span class="token function">tail_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> node is None<span class="token punctuation">:</span>\n            return node\n        self<span class="token punctuation">.</span><span class="token function">tail_order</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">tail_order</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">repr</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    def <span class="token function">depth_first_traversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span><span class="token function">pre_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    # \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\n    def <span class="token function">breadth_first_traversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        queue <span class="token operator">=</span> <span class="token function">deque</span><span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">queue_generator</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>\n\n    def <span class="token function">queue_generator</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">popleft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">repr</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> node<span class="token punctuation">.</span>lchild<span class="token punctuation">:</span>\n            queue<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> node<span class="token punctuation">.</span>rchild<span class="token punctuation">:</span>\n            queue<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> queue<span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span><span class="token function">queue_generator</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n\n    node1 <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">\'node1\'</span><span class="token punctuation">)</span>\n    node2 <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">\'node2\'</span><span class="token punctuation">)</span>\n    node3 <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">\'node3\'</span><span class="token punctuation">)</span>\n    node4 <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">\'node4\'</span><span class="token punctuation">)</span>\n    node5 <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">\'node5\'</span><span class="token punctuation">)</span>\n    node6 <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">\'node6\'</span><span class="token punctuation">)</span>\n    node7 <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">\'node7\'</span><span class="token punctuation">)</span>\n\n    root <span class="token operator">=</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n    root<span class="token punctuation">.</span>lchild <span class="token operator">=</span> node1\n    root<span class="token punctuation">.</span>rchild <span class="token operator">=</span> node2\n    node1<span class="token punctuation">.</span>lchild <span class="token operator">=</span> node3\n    node1<span class="token punctuation">.</span>rchild <span class="token operator">=</span> node4\n    node3<span class="token punctuation">.</span>lchild <span class="token operator">=</span> node5\n    node2<span class="token punctuation">.</span>lchild <span class="token operator">=</span> node6\n    node2<span class="token punctuation">.</span>rchild <span class="token operator">=</span> node7\n    tree <span class="token operator">=</span> <span class="token function">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\u524d\u5e8f\u904d\u5386:"</span><span class="token punctuation">)</span>\n    tree<span class="token punctuation">.</span><span class="token function">pre_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\u4e2d\u5e8f\u904d\u5386:"</span><span class="token punctuation">)</span>\n    tree<span class="token punctuation">.</span><span class="token function">middle_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\u540e\u5e8f\u904d\u5386:"</span><span class="token punctuation">)</span>\n    tree<span class="token punctuation">.</span><span class="token function">tail_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386:"</span><span class="token punctuation">)</span>\n    tree<span class="token punctuation">.</span><span class="token function">breadth_first_traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>'},["code","from collections import deque\n\n\nclass Node:\n    def __init__(self, name, lchild=None, rchild=None):\n        self.name = name\n        self.lchild = lchild\n        self.rchild = rchild\n\n    def __repr__(self):\n        return 'Name: %s' % self.name\n\n\nclass Tree:\n\n    def __init__(self, data=None):\n        self.data = data\n\n    # \u5148\u5e8f\u904d\u5386\n    def pre_order(self, node):\n        if node is None:\n            return node\n        print(repr(node))\n        self.pre_order(node.lchild)\n        self.pre_order(node.rchild)\n\n    # \u4e2d\u5e8f\u904d\u5386\n    def middle_order(self, node):\n        if node is None:\n            return node\n        self.middle_order(node.lchild)\n        print(repr(node))\n        self.middle_order(node.rchild)\n\n    # \u540e\u5e8f\u904d\u5386\n    def tail_order(self, node):\n        if node is None:\n            return node\n        self.tail_order(node.lchild)\n        self.tail_order(node.rchild)\n        print(repr(node))\n\n    def depth_first_traversal(self, node):\n        self.pre_order()\n\n    # \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\n    def breadth_first_traversal(self, node):\n        queue = deque([node])\n        self.queue_generator(queue)\n\n    def queue_generator(self, queue):\n        node = queue.popleft()\n        print(repr(node))\n        if node.lchild:\n            queue.append(node.lchild)\n        if node.rchild:\n            queue.append(node.rchild)\n        if queue:\n            self.queue_generator(queue)\n\n\nif __name__ == '__main__':\n\n    node1 = Node('node1')\n    node2 = Node('node2')\n    node3 = Node('node3')\n    node4 = Node('node4')\n    node5 = Node('node5')\n    node6 = Node('node6')\n    node7 = Node('node7')\n\n    root = Node('root')\n    root.lchild = node1\n    root.rchild = node2\n    node1.lchild = node3\n    node1.rchild = node4\n    node3.lchild = node5\n    node2.lchild = node6\n    node2.rchild = node7\n    tree = Tree();\n\n    print(\"\u524d\u5e8f\u904d\u5386:\")\n    tree.pre_order(root)\n    print(\"\u4e2d\u5e8f\u904d\u5386:\")\n    tree.middle_order(root)\n    print(\"\u540e\u5e8f\u904d\u5386:\")\n    tree.tail_order(root)\n    print(\"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386:\")\n    tree.breadth_first_traversal(root)"]],["p","\u8f93\u51fa\u7ed3\u679c"],["pre",{lang:null,highlighted:'\u524d\u5e8f\u904d\u5386<span class="token punctuation">:</span>\nName<span class="token punctuation">:</span> root\nName<span class="token punctuation">:</span> node1\nName<span class="token punctuation">:</span> node3\nName<span class="token punctuation">:</span> node5\nName<span class="token punctuation">:</span> node4\nName<span class="token punctuation">:</span> node2\nName<span class="token punctuation">:</span> node6\nName<span class="token punctuation">:</span> node7\n\u4e2d\u5e8f\u904d\u5386<span class="token punctuation">:</span>\nName<span class="token punctuation">:</span> node5\nName<span class="token punctuation">:</span> node3\nName<span class="token punctuation">:</span> node1\nName<span class="token punctuation">:</span> node4\nName<span class="token punctuation">:</span> root\nName<span class="token punctuation">:</span> node6\nName<span class="token punctuation">:</span> node2\nName<span class="token punctuation">:</span> node7\n\u540e\u5e8f\u904d\u5386<span class="token punctuation">:</span>\nName<span class="token punctuation">:</span> node5\nName<span class="token punctuation">:</span> node3\nName<span class="token punctuation">:</span> node4\nName<span class="token punctuation">:</span> node1\nName<span class="token punctuation">:</span> node6\nName<span class="token punctuation">:</span> node7\nName<span class="token punctuation">:</span> node2\nName<span class="token punctuation">:</span> root\n\u5e7f\u5ea6\u4f18\u5148\u904d\u5386<span class="token punctuation">:</span>\nName<span class="token punctuation">:</span> root\nName<span class="token punctuation">:</span> node1\nName<span class="token punctuation">:</span> node2\nName<span class="token punctuation">:</span> node3\nName<span class="token punctuation">:</span> node4\nName<span class="token punctuation">:</span> node6\nName<span class="token punctuation">:</span> node7\nName<span class="token punctuation">:</span> node5'},["code","\u524d\u5e8f\u904d\u5386:\nName: root\nName: node1\nName: node3\nName: node5\nName: node4\nName: node2\nName: node6\nName: node7\n\u4e2d\u5e8f\u904d\u5386:\nName: node5\nName: node3\nName: node1\nName: node4\nName: root\nName: node6\nName: node2\nName: node7\n\u540e\u5e8f\u904d\u5386:\nName: node5\nName: node3\nName: node4\nName: node1\nName: node6\nName: node7\nName: node2\nName: root\n\u5e7f\u5ea6\u4f18\u5148\u904d\u5386:\nName: root\nName: node1\nName: node2\nName: node3\nName: node4\nName: node6\nName: node7\nName: node5"]]],meta:{order:1,title:"\u4e8c\u53c9\u6811\u904d\u5386",type:"\u5165\u95e8",filename:"docs/algorithm/binary-tree-traversal.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#\u4e8c\u53c9\u6811\u904d\u5386\u7f16\u8f91",title:"\u4e8c\u53c9\u6811\u904d\u5386\u7f16\u8f91"},"\u4e8c\u53c9\u6811\u904d\u5386\u7f16\u8f91"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u5148\u5e8f\u904d\u5386",title:"\u5148\u5e8f\u904d\u5386"},"\u5148\u5e8f\u904d\u5386"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u4e2d\u5e8f\u904d\u5386",title:"\u4e2d\u5e8f\u904d\u5386"},"\u4e2d\u5e8f\u904d\u5386"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u540e\u5e8f\u904d\u5386",title:"\u540e\u5e8f\u904d\u5386"},"\u540e\u5e8f\u904d\u5386"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u5e7f\u5ea6\u4f18\u5148\u904d\u5386",title:"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"},"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"]]]}}});