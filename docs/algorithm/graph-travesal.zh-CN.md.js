webpackJsonp([62],{1318:function(n,s){n.exports={content:["article",["h3","\u56fe\u904d\u5386"],["p","\u56fe\u7684\u904d\u5386\u662f\u7b97\u6cd5\u4e2d\u7ecf\u5e38\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u4e0b\u9762\u901a\u8fc7python\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684bfs,dfs\u56fe\u904d\u5386\u7b97\u6cd5\u3002"],["pre",{lang:null,highlighted:'<span class="token string">""</span>"\nGraph\n\n             A\n          <span class="token operator">/</span>  |  \\\n        B    C   D\n       <span class="token operator">/</span>  \\       \\\n      E    F        G\n\n\n              A\n          <span class="token operator">/</span>  |  \\\n        B    C   D\n       <span class="token operator">/</span>  \\  <span class="token operator">/</span>    \\\n      E    F       G\n<span class="token string">""</span>"\n\n\nclass GraphNode<span class="token punctuation">:</span>\n\n    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value\n        self<span class="token punctuation">.</span>adjacent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">False</span>\n\n\nclass Graph<span class="token punctuation">:</span>\n\n    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        root <span class="token operator">=</span> <span class="token function">GraphNode</span><span class="token punctuation">(</span><span class="token string">\'A\'</span><span class="token punctuation">)</span>\n        gn1 <span class="token operator">=</span> <span class="token function">GraphNode</span><span class="token punctuation">(</span><span class="token string">\'B\'</span><span class="token punctuation">)</span>\n        gn2 <span class="token operator">=</span> <span class="token function">GraphNode</span><span class="token punctuation">(</span><span class="token string">\'C\'</span><span class="token punctuation">)</span>\n        gn3 <span class="token operator">=</span> <span class="token function">GraphNode</span><span class="token punctuation">(</span><span class="token string">\'D\'</span><span class="token punctuation">)</span>\n        gn4 <span class="token operator">=</span> <span class="token function">GraphNode</span><span class="token punctuation">(</span><span class="token string">\'E\'</span><span class="token punctuation">)</span>\n        gn5 <span class="token operator">=</span> <span class="token function">GraphNode</span><span class="token punctuation">(</span><span class="token string">\'F\'</span><span class="token punctuation">)</span>\n        gn6 <span class="token operator">=</span> <span class="token function">GraphNode</span><span class="token punctuation">(</span><span class="token string">\'G\'</span><span class="token punctuation">)</span>\n\n\n        self<span class="token punctuation">.</span><span class="token function">insert_node</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> gn1<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">insert_node</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> gn2<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">insert_node</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> gn3<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">insert_node</span><span class="token punctuation">(</span>gn1<span class="token punctuation">,</span> gn4<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">insert_node</span><span class="token punctuation">(</span>gn1<span class="token punctuation">,</span> gn5<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span><span class="token function">insert_node</span><span class="token punctuation">(</span>gn3<span class="token punctuation">,</span> gn6<span class="token punctuation">)</span>\n\n        # add circle <span class="token keyword">in</span> this graph\n        self<span class="token punctuation">.</span><span class="token function">insert_node</span><span class="token punctuation">(</span>gn2<span class="token punctuation">,</span> gn5<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>graph <span class="token operator">=</span> root\n\n    <span class="token variable">@staticmethod</span>\n    def <span class="token function">insert_node</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        parent<span class="token punctuation">.</span>adjacent<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n\n    def <span class="token function">bfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>graph<span class="token punctuation">]</span>\n        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>\n            current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n            path<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n            <span class="token keyword">for</span> node <span class="token keyword">in</span> current<span class="token punctuation">.</span>adjacent<span class="token punctuation">:</span>\n                <span class="token keyword">if</span> node<span class="token punctuation">.</span>visited is <span class="token boolean">False</span><span class="token punctuation">:</span>\n                    queue<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n                    node<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">True</span>\n        return path\n\n    def <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        node<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">True</span>\n        path<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n        <span class="token keyword">for</span> child <span class="token keyword">in</span> node<span class="token punctuation">.</span>adjacent<span class="token punctuation">:</span>\n            <span class="token keyword">if</span> child<span class="token punctuation">.</span>visited is <span class="token boolean">False</span><span class="token punctuation">:</span>\n                self<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> path<span class="token punctuation">)</span>\n        return path\n\n    def <span class="token function">check_circle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>graph<span class="token punctuation">]</span>\n        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>\n            current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n            path<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n            <span class="token keyword">for</span> node <span class="token keyword">in</span> current<span class="token punctuation">.</span>adjacent<span class="token punctuation">:</span>\n                <span class="token keyword">if</span> node<span class="token punctuation">.</span>visited <span class="token operator">and</span> node <span class="token keyword">in</span> queue<span class="token punctuation">:</span>\n                    return <span class="token boolean">True</span>\n                <span class="token keyword">if</span> node<span class="token punctuation">.</span>visited is <span class="token boolean">False</span><span class="token punctuation">:</span>\n                    queue<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n                    node<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">True</span>\n        return <span class="token boolean">False</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    g <span class="token operator">=</span> <span class="token function">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    # <span class="token function">print</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    # <span class="token function">print</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>graph<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code","\"\"\"\nGraph\n\n             A\n          /  |  \\\n        B    C   D\n       /  \\       \\\n      E    F        G\n\n\n              A\n          /  |  \\\n        B    C   D\n       /  \\  /    \\\n      E    F       G\n\"\"\"\n\n\nclass GraphNode:\n\n    def __init__(self, value):\n        self.value = value\n        self.adjacent = []\n        self.visited = False\n\n\nclass Graph:\n\n    def __init__(self):\n        root = GraphNode('A')\n        gn1 = GraphNode('B')\n        gn2 = GraphNode('C')\n        gn3 = GraphNode('D')\n        gn4 = GraphNode('E')\n        gn5 = GraphNode('F')\n        gn6 = GraphNode('G')\n\n\n        self.insert_node(root, gn1)\n        self.insert_node(root, gn2)\n        self.insert_node(root, gn3)\n        self.insert_node(gn1, gn4)\n        self.insert_node(gn1, gn5)\n        self.insert_node(gn3, gn6)\n\n        # add circle in this graph\n        self.insert_node(gn2, gn5)\n        self.graph = root\n\n    @staticmethod\n    def insert_node(parent, child):\n        parent.adjacent.append(child)\n\n    def bfs(self, path=[]):\n        queue = [self.graph]\n        while queue:\n            current = queue.pop(0)\n            path.append(current.value)\n            for node in current.adjacent:\n                if node.visited is False:\n                    queue.append(node)\n                    node.visited = True\n        return path\n\n    def dfs(self, node, path=[]):\n        node.visited = True\n        path.append(node.value)\n        for child in node.adjacent:\n            if child.visited is False:\n                self.dfs(child, path)\n        return path\n\n    def check_circle(self, path=[]):\n        queue = [self.graph]\n        while queue:\n            current = queue.pop(0)\n            path.append(current.value)\n            for node in current.adjacent:\n                if node.visited and node in queue:\n                    return True\n                if node.visited is False:\n                    queue.append(node)\n                    node.visited = True\n        return False\n\n\nif __name__ == '__main__':\n    g = Graph()\n    # print(g.bfs())\n    # print(g.dfs(g.graph, []))"]]],meta:{order:8,title:"\u56fe\u7684\u904d\u5386",type:"\u5165\u95e8",filename:"docs/algorithm/graph-travesal.zh-CN.md"},toc:["ul"]}}});