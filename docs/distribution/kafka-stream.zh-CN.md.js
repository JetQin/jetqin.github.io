webpackJsonp([29],{1302:function(n,s){n.exports={content:["article",["h2","\u7b80\u4ecb"],["p",["code","Kafka Stream"],"\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\u5f00\u53d1\u5e93\uff0c\u7528\u6765\u5f00\u53d1\u4e25\u683c\u7684\u5b9e\u65f6\u5e94\u7528\u6216\u8005\u5fae\u670d\u52a1\uff0c\u671f\u95f4\u4ea7\u751f\u7684\u6570\u636e\u4f1a\u5b58\u50a8\u5728kafka\u96c6\u7fa4\u4e2d\u3002 \u5b83\u5305\u62ec\u7531java\u6216\u8005scala\u7f16\u5199\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u4ee5\u53cakafka \u96c6\u7fa4\u63d0\u4f9b\u7684\u53ef\u4f38\u7f29\uff0c\u5bb9\u9519\u7684\u5206\u5e03\u5f0f\u670d\u52a1\u7aef\u5e94\u7528\u3002"],["h2","Kafka Stream \u5b9e\u65f6\u6d41\u5904\u7406"],["ul",["li",["p","\u5206\u522b\u521b\u5efa\u8f93\u5165\u8f93\u51fa",["code","topics"]]]],["pre",{lang:null,highlighted:'kafka<span class="token operator">-</span>topics<span class="token punctuation">.</span>sh <span class="token operator">-</span><span class="token operator">-</span>create <span class="token operator">-</span><span class="token operator">-</span>bootstrap<span class="token operator">-</span>server localhost<span class="token punctuation">:</span><span class="token number">9092</span> <span class="token operator">-</span><span class="token operator">-</span>replication<span class="token operator">-</span>factor <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">-</span>partitions <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">-</span>topic streams<span class="token operator">-</span>plaintext<span class="token operator">-</span>input\n\nkafka<span class="token operator">-</span>topics<span class="token punctuation">.</span>sh <span class="token operator">-</span><span class="token operator">-</span>create <span class="token operator">-</span><span class="token operator">-</span>bootstrap<span class="token operator">-</span>server localhost<span class="token punctuation">:</span><span class="token number">9092</span> <span class="token operator">-</span><span class="token operator">-</span>replication<span class="token operator">-</span>factor <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">-</span>partitions <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">-</span>topic streams<span class="token operator">-</span>wordcount<span class="token operator">-</span>output <span class="token operator">-</span><span class="token operator">-</span>config cleanup<span class="token punctuation">.</span>policy<span class="token operator">=</span>compact'},["code","kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic streams-plaintext-input\n\nkafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic streams-wordcount-output --config cleanup.policy=compact"]],["ul",["li",["p","\u7f16\u5199\u4ee3\u7801"]]],["pre",{lang:null,highlighted:'package io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jetqin<span class="token comment" spellcheck="true">;</span>\n\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerConfig<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>Serde<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>Serdes<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span>KafkaStreams<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span>StreamsBuilder<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span>StreamsConfig<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span>kstream<span class="token punctuation">.</span>Consumed<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span>kstream<span class="token punctuation">.</span>KStream<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span>kstream<span class="token punctuation">.</span>KTable<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>streams<span class="token punctuation">.</span>kstream<span class="token punctuation">.</span>Produced<span class="token comment" spellcheck="true">;</span>\n\nimport java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token comment" spellcheck="true">;</span>\nimport java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token comment" spellcheck="true">;</span>\nimport java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token comment" spellcheck="true">;</span>\n\npublic class KafkaStreamWordCountApp {\n\n    public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> {\n\n\n        final Properties props <span class="token operator">=</span> new <span class="token function">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>StreamsConfig<span class="token punctuation">.</span>APPLICATION_ID_CONFIG<span class="token punctuation">,</span> <span class="token string">"streams-wordcount"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>StreamsConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span> <span class="token string">"localhost:9092"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>StreamsConfig<span class="token punctuation">.</span>CACHE_MAX_BYTES_BUFFERING_CONFIG<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>StreamsConfig<span class="token punctuation">.</span>DEFAULT_KEY_SERDE_CLASS_CONFIG<span class="token punctuation">,</span> Serdes<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>StreamsConfig<span class="token punctuation">.</span>DEFAULT_VALUE_SERDE_CLASS_CONFIG<span class="token punctuation">,</span> Serdes<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> setting offset reset <span class="token keyword">to</span> earliest so that we can re<span class="token operator">-</span>run the demo code <span class="token keyword">with</span> the same pre<span class="token operator">-</span>loaded data\n        <span class="token operator">/</span><span class="token operator">/</span> Note<span class="token punctuation">:</span> <span class="token keyword">To</span> re<span class="token operator">-</span>run the demo<span class="token punctuation">,</span> you need <span class="token keyword">to</span> use the offset reset tool<span class="token punctuation">:</span>\n        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>AUTO_OFFSET_RESET_CONFIG<span class="token punctuation">,</span> <span class="token string">"earliest"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        final StreamsBuilder builder <span class="token operator">=</span> new <span class="token function">StreamsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n\n        <span class="token operator">/</span><span class="token operator">/</span> Serializers<span class="token operator">/</span>deserializers <span class="token punctuation">(</span>serde<span class="token punctuation">)</span> <span class="token keyword">for</span> String <span class="token operator">and</span> Long types\n        final Serde<span class="token operator">&lt;</span>String<span class="token operator">></span> stringSerde <span class="token operator">=</span> Serdes<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        final Serde<span class="token operator">&lt;</span>Long<span class="token operator">></span> longSerde <span class="token operator">=</span> Serdes<span class="token punctuation">.</span><span class="token function">Long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> Construct a `KStream` from the input topic <span class="token string">"streams-plaintext-input"</span><span class="token punctuation">,</span> where message values\n        <span class="token operator">/</span><span class="token operator">/</span> represent lines of text <span class="token punctuation">(</span><span class="token keyword">for</span> the sake of this example<span class="token punctuation">,</span> we ignore whatever may be stored\n        <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">in</span> the message keys<span class="token punctuation">)</span><span class="token punctuation">.</span>\n        KStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> textLines <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token string">"streams-plaintext-input"</span><span class="token punctuation">,</span> Consumed<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>stringSerde<span class="token punctuation">,</span> stringSerde<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        KTable<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> wordCounts <span class="token operator">=</span> textLines\n                <span class="token operator">/</span><span class="token operator">/</span> Split each text line<span class="token punctuation">,</span> by whitespace<span class="token punctuation">,</span> into words<span class="token punctuation">.</span>\n                <span class="token punctuation">.</span><span class="token function">flatMapValues</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n                <span class="token operator">/</span><span class="token operator">/</span> Group the text words as message keys\n                <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> value<span class="token punctuation">)</span>\n\n                <span class="token operator">/</span><span class="token operator">/</span> Count the occurrences of each word <span class="token punctuation">(</span>message key<span class="token punctuation">)</span><span class="token punctuation">.</span>\n                <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> Store the running counts as a changelog stream <span class="token keyword">to</span> the output topic<span class="token punctuation">.</span>\n        wordCounts<span class="token punctuation">.</span><span class="token function">toStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">"streams-wordcount-output"</span><span class="token punctuation">,</span> Produced<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Serdes<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Serdes<span class="token punctuation">.</span><span class="token function">Long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        final KafkaStreams streams <span class="token operator">=</span> new <span class="token function">KafkaStreams</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        final CountDownLatch latch <span class="token operator">=</span> new <span class="token function">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> attach shutdown handler <span class="token keyword">to</span> catch control<span class="token operator">-</span>c\n        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span>new <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token string">"streams-wordcount-shutdown-hook"</span><span class="token punctuation">)</span> {\n            <span class="token variable">@Override</span>\n            public void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n                streams<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            }\n        }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        try {\n            streams<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        } catch <span class="token punctuation">(</span>final Throwable e<span class="token punctuation">)</span> {\n            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }\n        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n    }\n}'},["code",'package io.github.jetqin;\n\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.Serde;\nimport org.apache.kafka.common.serialization.Serdes;\nimport org.apache.kafka.streams.KafkaStreams;\nimport org.apache.kafka.streams.StreamsBuilder;\nimport org.apache.kafka.streams.StreamsConfig;\nimport org.apache.kafka.streams.kstream.Consumed;\nimport org.apache.kafka.streams.kstream.KStream;\nimport org.apache.kafka.streams.kstream.KTable;\nimport org.apache.kafka.streams.kstream.Produced;\n\nimport java.util.Arrays;\nimport java.util.Properties;\nimport java.util.concurrent.CountDownLatch;\n\npublic class KafkaStreamWordCountApp {\n\n    public static void main(String[] args) {\n\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, "streams-wordcount");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        // setting offset reset to earliest so that we can re-run the demo code with the same pre-loaded data\n        // Note: To re-run the demo, you need to use the offset reset tool:\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n\n        // Serializers/deserializers (serde) for String and Long types\n        final Serde<String> stringSerde = Serdes.String();\n        final Serde<Long> longSerde = Serdes.Long();\n\n        // Construct a `KStream` from the input topic "streams-plaintext-input", where message values\n        // represent lines of text (for the sake of this example, we ignore whatever may be stored\n        // in the message keys).\n        KStream<String, String> textLines = builder.stream("streams-plaintext-input", Consumed.with(stringSerde, stringSerde));\n\n        KTable<String, Long> wordCounts = textLines\n                // Split each text line, by whitespace, into words.\n                .flatMapValues(value -> Arrays.asList(value.toLowerCase().split("\\\\W+")))\n\n                // Group the text words as message keys\n                .groupBy((key, value) -> value)\n\n                // Count the occurrences of each word (message key).\n                .count();\n\n        // Store the running counts as a changelog stream to the output topic.\n        wordCounts.toStream().to("streams-wordcount-output", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        // attach shutdown handler to catch control-c\n        Runtime.getRuntime().addShutdownHook(new Thread("streams-wordcount-shutdown-hook") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n\n    }\n}']],["ul",["li",["p","\u5c06\u7f16\u8bd1\u597d\u7684jar\u5305copy\u5230$KAFKA_HOME/libs\u76ee\u5f55\u4e0b"]]],["p","\u6253\u5f00\u4e09\u4e2a\u547d\u4ee4\u7a97\u53e3\u5206\u522b\u8fd0\u884cproducer\u6a21\u62df\u8f93\u5165\uff0cwordcount\u5e94\u7528\u6267\u884c\u7edf\u8ba1\u8ba1\u7b97\uff0c\u4ee5\u53caconsumer\u67e5\u770b\u8f93\u51fa\u961f\u5217\u4e2d\u7684\u8be6\u7ec6\u4fe1\u606f"],["pre",{lang:null,highlighted:' kafka<span class="token operator">-</span>run<span class="token operator">-</span>class<span class="token punctuation">.</span>sh io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jetqin<span class="token punctuation">.</span>KafkaStreamWordCountApp'},["code"," kafka-run-class.sh io.github.jetqin.KafkaStreamWordCountApp"]],["pre",{lang:null,highlighted:' kafka<span class="token operator">-</span>console<span class="token operator">-</span>producer<span class="token punctuation">.</span>sh <span class="token operator">-</span><span class="token operator">-</span>broker<span class="token operator">-</span>list localhost<span class="token punctuation">:</span><span class="token number">9092</span> <span class="token operator">-</span><span class="token operator">-</span>topic streams<span class="token operator">-</span>plaintext<span class="token operator">-</span>input'},["code"," kafka-console-producer.sh --broker-list localhost:9092 --topic streams-plaintext-input"]],["pre",{lang:null,highlighted:'kafka<span class="token operator">-</span>console<span class="token operator">-</span>consumer<span class="token punctuation">.</span>sh <span class="token operator">-</span><span class="token operator">-</span>bootstrap<span class="token operator">-</span>server localhost<span class="token punctuation">:</span><span class="token number">9092</span>     \n       <span class="token operator">-</span><span class="token operator">-</span>topic streams<span class="token operator">-</span>wordcount<span class="token operator">-</span>output     \n       <span class="token operator">-</span><span class="token operator">-</span>from<span class="token operator">-</span>beginning     \n       <span class="token operator">-</span><span class="token operator">-</span>formatter kafka<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>DefaultMessageFormatter     \n       <span class="token operator">-</span><span class="token operator">-</span>property print<span class="token punctuation">.</span>key<span class="token operator">=</span><span class="token boolean">true</span>     \n       <span class="token operator">-</span><span class="token operator">-</span>property print<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token boolean">true</span>     \n       <span class="token operator">-</span><span class="token operator">-</span>property key<span class="token punctuation">.</span>deserializer<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>StringDeserializer     \n       <span class="token operator">-</span><span class="token operator">-</span>property value<span class="token punctuation">.</span>deserializer<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>LongDeserializer'},["code","kafka-console-consumer.sh --bootstrap-server localhost:9092     \n       --topic streams-wordcount-output     \n       --from-beginning     \n       --formatter kafka.tools.DefaultMessageFormatter     \n       --property print.key=true     \n       --property print.value=true     \n       --property key.deserializer=org.apache.kafka.common.serialization.StringDeserializer     \n       --property value.deserializer=org.apache.kafka.common.serialization.LongDeserializer"]],["p"," \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b:\n ",["img",{title:null,src:"./assets/kafka-stream-wordcount.png",alt:"Kafka Stream Word Count"}]]],meta:{order:7,title:"Apache Kafka Stream \u5b57\u7b26\u7edf\u8ba1",type:"\u5165\u95e8",filename:"docs/distribution/kafka-stream.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#\u7b80\u4ecb",title:"\u7b80\u4ecb"},"\u7b80\u4ecb"]],["li",["a",{className:"bisheng-toc-h2",href:"#Kafka-Stream-\u5b9e\u65f6\u6d41\u5904\u7406",title:"Kafka Stream \u5b9e\u65f6\u6d41\u5904\u7406"},"Kafka Stream \u5b9e\u65f6\u6d41\u5904\u7406"]]]}}});