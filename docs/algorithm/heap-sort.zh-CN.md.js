webpackJsonp([61],{1319:function(n,a){n.exports={content:["article",["h3","\u5806\u6392\u5e8f"],["p","\u5806\u6392\u5e8f\u662f\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log(n))\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u4e0e\u5feb\u6392\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u76f8\u4f3c\uff0c \u5feb\u6392\u8981\u501f\u52a9\u5806\u6765\u5b9e\u73b0\uff0c\u5806\u53c8\u5206\u4e3a\u6700\u5927\u5806\uff0c\u6700\u5c0f\u5806\n\u6700\u5927\u5806\u5373\u6839\u7ed3\u70b9\u5927\u4e8e\u5de6\u53f3\u53f6\u5b50\u8282\u70b9\uff0c\u53cd\u4e4b\u5219\u4e3a\u6700\u5c0f\u5806 "],["pre",{lang:null,highlighted:'def <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    largest <span class="token operator">=</span> i  # <span class="token keyword">In</span> max<span class="token operator">-</span>heap largest is at root\n    l <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>  # left child index <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span>\n    r <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>  # right child index <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">2</span>\n\n    # See <span class="token keyword">if</span> left child of root exists <span class="token operator">and</span> <span class="token operator">></span> root\n    <span class="token keyword">if</span> l <span class="token operator">&lt;</span> n <span class="token operator">and</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span>\n        largest <span class="token operator">=</span> l\n\n    # See <span class="token keyword">if</span> right child of root exists <span class="token operator">and</span> <span class="token operator">></span> root\n    <span class="token keyword">if</span> r <span class="token operator">&lt;</span> n <span class="token operator">and</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>\n        largest <span class="token operator">=</span> r\n\n        # update root <span class="token keyword">if</span> required\n    <span class="token keyword">if</span> largest !<span class="token operator">=</span> i<span class="token punctuation">:</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  # swap\n\n        # Heapify the root\n        <span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>\n\n\ndef <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>n <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n\n        # extracting elements\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  # swap\n        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>\n    <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n    n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Sorted array is"</span><span class="token punctuation">)</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>'},["code","def heapify(arr, n, i):\n    largest = i  # In max-heap largest is at root\n    l = 2 * i + 1  # left child index = 2*i + 1\n    r = 2 * i + 2  # right child index = 2*i + 2\n\n    # See if left child of root exists and > root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    # See if right child of root exists and > root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n        # update root if required\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Heapify the root\n        print(arr)\n        heapify(arr, n, largest)\n\n\ndef heapSort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n        # extracting elements\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n\n\nif __name__ == '__main__':\n    arr = [12, 11, 13, 5, 6, 7]\n    heapSort(arr)\n    n = len(arr)\n    print(\"Sorted array is\")\n    print(arr)"]]],meta:{order:9,title:"\u5806\u6392\u5e8f",type:"\u5165\u95e8",filename:"docs/algorithm/heap-sort.zh-CN.md"},toc:["ul"]}}});