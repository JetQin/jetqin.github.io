webpackJsonp([14],{1273:function(n,s){n.exports={content:["article",["h2","Java \u5185\u5b58\u6a21\u578b"],["p","Java\u5185\u5b58\u6a21\u578b\u89c4\u5b9a\u6240\u6709\u7684\u53d8\u91cf\u90fd\u5b58\u50a8\u5728\u4e3b\u5185\u5b58\u4e2d\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u5de5\u4f5c\u5185\u5b58\uff0c\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e86\u8be5\u7ebf\u7a0b\u4f7f\u7528\u5230\u7684\u4e3b\u5185\u5b58\u53d8\u91cf\u4e2d\u7684\u62f7\u8d1d\u3002\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5fc5\u987b\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u8fdb\u884c\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u5199\u4e3b\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\uff0c\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u4e5f\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u5bf9\u65b9\u5de5\u4f5c\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\uff0c\u5373\u5de5\u4f5c\u5185\u5b58\u662f\u79c1\u6709\u7684\uff0c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u53d8\u91cf\u4f20\u9012\u5747\u9700\u8981\u4e3b\u5185\u5b58\u6765\u5b8c\u6210\u3002"],["p",["img",{title:null,src:"./assets/jvm-mm.png",alt:"Java \u5185\u5b58"}]],["h2","volatile vs. synchronized"],["p",["strong","volatile:"],"\n\u5f53\u4e00\u4e2a\u53d8\u91cf\u88ab\u5b9a\u4e49\u4e3avolatile\u4e4b\u540e\uff0c\u5b83\u5c06\u5177\u5907\u4e24\u79cd\u7279\u6027\uff1a"],["ul",["li",["p","\u53ef\u89c1\u6027: \u4fdd\u8bc1\u6b64\u53d8\u91cf\u5bf9\u6240\u6709\u7ebf\u7a0b\u7684\u53ef\u89c1\u6027\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u6b64\u53d8\u91cf\uff0c\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u7acb\u5373\u83b7\u5f97\u6b64\u53d8\u91cf\u7684\u65b0\u503c"]],["li",["p","\u7981\u6b62\u6307\u4ee4\u91cd\u6392: \u666e\u901a\u53d8\u91cf\u4ec5\u4ec5\u4f1a\u4fdd\u8bc1\u5728\u8be5\u65b9\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u6240\u6709\u4f9d\u8d56\u8d4b\u503c\u7ed3\u679c\u7684\u5730\u65b9\u80fd\u83b7\u5f97\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u80fd\u4fdd\u8bc1\u53d8\u91cf\u8d4b\u503c\u7684\u64cd\u4f5c\u987a\u5e8f\u4e0e\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u6267\u884c\u987a\u5e8f\u4e00\u81f4\u3002\u7ebf\u7a0b\u5185\u8868\u73b0\u4e3a\u4e32\u884c\u7684\u8bed\u4e49\uff0c\u5373\u5185\u90e8\u6267\u884c\u662f\u4e32\u884c\u7684\u3002"]]],["p",["strong","synchronized"],"\nsynchronized \u53ef\u4ee5\u4fee\u9970\u65b9\u6cd5\u6216\u8005\u540c\u6b65\u5757\uff0c\u4e3b\u8981\u786e\u4fdd\u591a\u4e2a\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5904\u4e8e\u540c\u6b65\u65b9\u6cd5\u6216\u540c\u6b65\u5757\u4e2d\uff0c\n\u4fdd\u8bc1\u4e86\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u8bbf\u95ee\u7684\u53ef\u89c1\u6027\u548c\u6392\u4ed6\u6027."],["p","\u5982\u4e0b\u53ef\u4ee5\u770b\u5230\uff0c\u540c\u6b65\u5757\u4f7f\u7528",["code","monitorenter"],"\u548c",["code","monitorexit"],"\u6765\u63a7\u5236\uff0c\u540c\u6b65\u65b9\u6cd5\u4f7f\u7528",["code","ACC_SYNCHRONIZED"],"\u6765\u8fdb\u884c\u8bbf\u95ee\u63a7\u5236"],["pre",{lang:null,highlighted:'public class Test {\n\n    public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> {\n\n        synchronized <span class="token punctuation">(</span>Test<span class="token punctuation">.</span>class<span class="token punctuation">)</span>{\n            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sync block"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }\n        <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n\n    public <span class="token keyword">static</span> synchronized void <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n\n    }\n}'},["code",'public class Test {\n\n    public static void main(String[] args) {\n\n        synchronized (Test.class){\n            System.out.println("sync block");\n        }\n        sync();\n    }\n\n    public static synchronized void sync(){\n\n    }\n}']],["p","\u4f7f\u7528 javap -v Test.class \u67e5\u770b"],["pre",{lang:null,highlighted:' public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    descriptor<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token comment" spellcheck="true">;)V</span>\n    flags<span class="token punctuation">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC\n    Code<span class="token punctuation">:</span>\n      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>\n         <span class="token number">0</span><span class="token punctuation">:</span> ldc           #<span class="token number">2</span>                  <span class="token operator">/</span><span class="token operator">/</span> class com<span class="token operator">/</span>github<span class="token operator">/</span>jetqin<span class="token operator">/</span>Test\n         <span class="token number">2</span><span class="token punctuation">:</span> dup\n         <span class="token number">3</span><span class="token punctuation">:</span> astore_1\n         <span class="token number">4</span><span class="token punctuation">:</span> monitorenter\n         <span class="token number">5</span><span class="token punctuation">:</span> getstatic     #<span class="token number">3</span>                  <span class="token operator">/</span><span class="token operator">/</span> Field java<span class="token operator">/</span>lang<span class="token operator">/</span>System<span class="token punctuation">.</span>out<span class="token punctuation">:</span>Ljava<span class="token operator">/</span>io<span class="token operator">/</span>PrintStream<span class="token comment" spellcheck="true">;</span>\n         <span class="token number">8</span><span class="token punctuation">:</span> ldc           #<span class="token number">4</span>                  <span class="token operator">/</span><span class="token operator">/</span> String sync block\n        <span class="token number">10</span><span class="token punctuation">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token operator">/</span><span class="token operator">/</span> Method java<span class="token operator">/</span>io<span class="token operator">/</span>PrintStream<span class="token punctuation">.</span>println<span class="token punctuation">:</span><span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token comment" spellcheck="true">;)V</span>\n        <span class="token number">13</span><span class="token punctuation">:</span> aload_1\n        <span class="token number">14</span><span class="token punctuation">:</span> monitorexit\n        <span class="token number">15</span><span class="token punctuation">:</span> goto          <span class="token number">23</span>\n        <span class="token number">18</span><span class="token punctuation">:</span> astore_2\n        <span class="token number">19</span><span class="token punctuation">:</span> aload_1\n        <span class="token number">20</span><span class="token punctuation">:</span> monitorexit\n        <span class="token number">21</span><span class="token punctuation">:</span> aload_2\n        <span class="token number">22</span><span class="token punctuation">:</span> athrow\n        <span class="token number">23</span><span class="token punctuation">:</span> invokestatic  #<span class="token number">6</span>                  <span class="token operator">/</span><span class="token operator">/</span> Method sync<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span>V\n        <span class="token number">26</span><span class="token punctuation">:</span> return\n      Exception table<span class="token punctuation">:</span>\n         from    <span class="token keyword">to</span>  target type\n             <span class="token number">5</span>    <span class="token number">15</span>    <span class="token number">18</span>   any\n            <span class="token number">18</span>    <span class="token number">21</span>    <span class="token number">18</span>   any\n      LineNumberTable<span class="token punctuation">:</span>\n        line <span class="token number">7</span><span class="token punctuation">:</span> <span class="token number">0</span>\n        line <span class="token number">8</span><span class="token punctuation">:</span> <span class="token number">5</span>\n        line <span class="token number">9</span><span class="token punctuation">:</span> <span class="token number">13</span>\n        line <span class="token number">10</span><span class="token punctuation">:</span> <span class="token number">23</span>\n        line <span class="token number">11</span><span class="token punctuation">:</span> <span class="token number">26</span>\n      LocalVariableTable<span class="token punctuation">:</span>\n        Start  Length  Slot  Name   Signature\n            <span class="token number">0</span>      <span class="token number">27</span>     <span class="token number">0</span>  args   <span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token comment" spellcheck="true">;</span>\n      StackMapTable<span class="token punctuation">:</span> number_of_entries <span class="token operator">=</span> <span class="token number">2</span>\n        frame_type <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">/</span><span class="token operator">*</span> full_frame <span class="token operator">*</span><span class="token operator">/</span>\n          offset_delta <span class="token operator">=</span> <span class="token number">18</span>\n          locals <span class="token operator">=</span> <span class="token punctuation">[</span> class "<span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token comment" spellcheck="true">;", class java/lang/Object ]</span>\n          stack <span class="token operator">=</span> <span class="token punctuation">[</span> class java<span class="token operator">/</span>lang<span class="token operator">/</span>Throwable <span class="token punctuation">]</span>\n        frame_type <span class="token operator">=</span> <span class="token number">250</span> <span class="token operator">/</span><span class="token operator">*</span> chop <span class="token operator">*</span><span class="token operator">/</span>\n          offset_delta <span class="token operator">=</span> <span class="token number">4</span>\n\n  public <span class="token keyword">static</span> synchronized void <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    descriptor<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>V\n    flags<span class="token punctuation">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC<span class="token punctuation">,</span> ACC_SYNCHRONIZED\n    Code<span class="token punctuation">:</span>\n      stack<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span>\n         <span class="token number">0</span><span class="token punctuation">:</span> return\n      LineNumberTable<span class="token punctuation">:</span>\n        line <span class="token number">15</span><span class="token punctuation">:</span> <span class="token number">0</span>\n}'},["code",' public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: ldc           #2                  // class com/github/jetqin/Test\n         2: dup\n         3: astore_1\n         4: monitorenter\n         5: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         8: ldc           #4                  // String sync block\n        10: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        13: aload_1\n        14: monitorexit\n        15: goto          23\n        18: astore_2\n        19: aload_1\n        20: monitorexit\n        21: aload_2\n        22: athrow\n        23: invokestatic  #6                  // Method sync:()V\n        26: return\n      Exception table:\n         from    to  target type\n             5    15    18   any\n            18    21    18   any\n      LineNumberTable:\n        line 7: 0\n        line 8: 5\n        line 9: 13\n        line 10: 23\n        line 11: 26\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      27     0  args   [Ljava/lang/String;\n      StackMapTable: number_of_entries = 2\n        frame_type = 255 /* full_frame */\n          offset_delta = 18\n          locals = [ class "[Ljava/lang/String;", class java/lang/Object ]\n          stack = [ class java/lang/Throwable ]\n        frame_type = 250 /* chop */\n          offset_delta = 4\n\n  public static synchronized void sync();\n    descriptor: ()V\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED\n    Code:\n      stack=0, locals=0, args_size=0\n         0: return\n      LineNumberTable:\n        line 15: 0\n}']],["h2","wait & notify & join"],["p","\u7b49\u5f85\u901a\u77e5\u6a21\u578b\uff0c\u5e38\u89c1\u7684\u5c31\u662f\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u751f\u4ea7\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u6d88\u8d39\uff0c\u6d88\u8d39\u5b8c\u4e4b\u540e\u7b49\u5f85\u751f\u4ea7\u8005\u7684\u901a\u77e5\u7ee7\u7eed\u751f\u4ea7\u3002Java \u4e2d\u63d0\u4f9b\u4e86",["code","wait"],"\u4ee5\u53ca",["code","notify"],"\u5173\u952e\u5b57\u6765\u5b9e\u73b0\u8fd9\u4e00\u7279\u70b9\u3002"],["pre",{lang:null,highlighted:'public class Test {\n\n    private <span class="token keyword">static</span> Object lock <span class="token operator">=</span> new <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n    public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> {\n\n       Thread producer <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span>new <span class="token function">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Producer"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n       Thread consumer <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span>new <span class="token function">Consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Consumer"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n       producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n       SleepUtils<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n       consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n       Thread joinThread1 <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span>new <span class="token function">JoinRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"join1"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n       Thread joinThread2 <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span>new <span class="token function">JoinRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"join2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        joinThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        try{\n         joinThread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span>{}\n\n        joinThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        try{\n            joinThread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span>{}\n\n    }\n\n    <span class="token keyword">static</span> class Producer implements Runnable{\n\n        <span class="token variable">@Override</span>\n        public void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n            synchronized <span class="token punctuation">(</span>lock<span class="token punctuation">)</span>{\n                try{\n                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Producer finish, start to wait"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                    lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                }catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span>{\n\n                }\n                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Producer start again"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            }\n        }\n    }\n\n    <span class="token keyword">static</span> class Consumer implements Runnable{\n\n        <span class="token variable">@Override</span>\n        public void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n            synchronized <span class="token punctuation">(</span>lock<span class="token punctuation">)</span>{\n                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer to start"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                SleepUtils<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            }\n\n        }\n    }\n\n    <span class="token keyword">static</span> class JoinRunner implements Runnable{\n\n        <span class="token variable">@Override</span>\n        public void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Execution:"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }\n    }\n}'},["code",'public class Test {\n\n    private static Object lock = new Object();\n\n    public static void main(String[] args) {\n\n       Thread producer = new Thread(new Producer(),"Producer");\n       Thread consumer = new Thread(new Consumer(), "Consumer");\n       producer.start();\n       SleepUtils.second(2);\n       consumer.start();\n       Thread joinThread1 = new Thread(new JoinRunner(), "join1");\n       Thread joinThread2 = new Thread(new JoinRunner(), "join2");\n\n        joinThread1.start();\n        try{\n         joinThread1.join();\n        }catch (InterruptedException e){}\n\n        joinThread2.start();\n        try{\n            joinThread2.join();\n        }catch (InterruptedException e){}\n\n    }\n\n    static class Producer implements Runnable{\n\n        @Override\n        public void run() {\n            synchronized (lock){\n                try{\n                    System.out.println("Producer finish, start to wait");\n                    lock.wait();\n                }catch (InterruptedException e){\n\n                }\n                System.out.println("Producer start again");\n            }\n        }\n    }\n\n    static class Consumer implements Runnable{\n\n        @Override\n        public void run() {\n            synchronized (lock){\n                System.out.println("Consumer to start");\n                SleepUtils.second(3);\n                lock.notify();\n            }\n\n        }\n    }\n\n    static class JoinRunner implements Runnable{\n\n        @Override\n        public void run() {\n            System.out.println("Thread Execution:"+Thread.currentThread().getName());\n        }\n    }\n}']],["p","\u8f93\u51fa\u7ed3\u679c"],["pre",{lang:null,highlighted:'Producer finish<span class="token punctuation">,</span> start <span class="token keyword">to</span> wait\nConsumer <span class="token keyword">to</span> start\nProducer start again'},["code","Producer finish, start to wait\nConsumer to start\nProducer start again"]],["p",["strong","join:"]," \n\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u4e86join\u65b9\u6cd5\uff0c\u610f\u5473\u7740\u5f53\u6b64\u7ebf\u7a0b\u7ec8\u6b62\u540e\uff0c\u624d\u4f1a\u4ecejoin\u65b9\u6cd5\u8fd4\u56de\u3002"],["h2","ThreadLocal"],["p","ThreadLocal\u5373\u7ebf\u7a0b\u53d8\u91cf\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u53d8\u91cf\uff0c\u53ea\u5bf9\u521b\u5efa\u7684\u7ebf\u7a0b\u53ef\u89c1\uff0c\u5176\u4ed6\u7ebf\u7a0b\u4e0d\u53ef\u89c1\uff0c\u5373\u540c\u7ebf\u7a0b\u79c1\u6709\u7684,\n\u4e0d\u540c\u7684\u7ebf\u7a0b\u6267\u884c\u5305\u542b\u76f8\u540c\u4ee3\u7801\u7684",["code","ThreadLocal"],"\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u4e5f\u4e0d\u80fd\u770b\u5230\u5bf9\u65b9\u7ebf\u7a0b\u4e2d\u7684",["code","ThreadLocal"],"\u53d8\u91cf"],["pre",{lang:null,highlighted:'public class Test {\n\n    private <span class="token keyword">static</span> Object lock <span class="token operator">=</span> new <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n    public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> {\n\n        LocalRunner runner <span class="token operator">=</span> new <span class="token function">LocalRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        Thread local1 <span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span>runner<span class="token punctuation">,</span> <span class="token string">"Thread1"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        Thread local2<span class="token operator">=</span> new <span class="token function">Thread</span><span class="token punctuation">(</span>runner<span class="token punctuation">,</span> <span class="token string">"Thread2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        local1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        local2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        try {\n            local1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            local2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span>{}\n\n    }\n\n    <span class="token keyword">static</span> class LocalRunner implements Runnable{\n\n        private ThreadLocal<span class="token operator">&lt;</span>Integer<span class="token operator">></span> threadLocal <span class="token operator">=</span> new ThreadLocal<span class="token operator">&lt;></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        private int size <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token variable">@Override</span>\n        public void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> 100D<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"local=%d, size=%d"</span><span class="token punctuation">,</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        }\n    }\n}'},["code",'public class Test {\n\n    private static Object lock = new Object();\n\n    public static void main(String[] args) {\n\n        LocalRunner runner = new LocalRunner();\n        Thread local1 = new Thread(runner, "Thread1");\n        Thread local2= new Thread(runner, "Thread2");\n\n        local1.start();\n        local2.start();\n\n        try {\n            local1.join();\n            local2.join();\n        }catch (InterruptedException e){}\n\n    }\n\n    static class LocalRunner implements Runnable{\n\n        private ThreadLocal<Integer> threadLocal = new ThreadLocal<>();\n        private int size = 1;\n\n        @Override\n        public void run() {\n            threadLocal.set( (int) (Math.random() * 100D) );\n            System.out.println(String.format("local=%d, size=%d",threadLocal.get(), size));\n        }\n    }\n}']]],meta:{order:7,title:"\u9ad8\u6548\u5e76\u53d1",type:"\u5165\u95e8",filename:"docs/java/java-concurrency.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#Java-\u5185\u5b58\u6a21\u578b",title:"Java \u5185\u5b58\u6a21\u578b"},"Java \u5185\u5b58\u6a21\u578b"]],["li",["a",{className:"bisheng-toc-h2",href:"#volatile-vs.-synchronized",title:"volatile vs. synchronized"},"volatile vs. synchronized"]],["li",["a",{className:"bisheng-toc-h2",href:"#wait-&-notify-&-join",title:"wait & notify & join"},"wait & notify & join"]],["li",["a",{className:"bisheng-toc-h2",href:"#ThreadLocal",title:"ThreadLocal"},"ThreadLocal"]]]}}});