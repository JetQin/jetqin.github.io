webpackJsonp([35],{1296:function(n,a){n.exports={content:["article",["h2","\u7b80\u4ecb"],["p","Apache Flink \u662f\u4e00\u4e2a\u53ef\u4ee5\u5904\u7406\u65e0\u754c\u548c\u6709\u754c\u6570\u636e\u6d41\u7684\u5206\u5e03\u5f0f\u5904\u7406\u5f15\u64ce\uff0c\u5728\u8bbe\u8ba1\u4e4b\u521d\uff0c\u5b83\u5c31\u88ab\u8bbe\u8ba1\u6210\u53ef\u4ee5\u8fd0\u884c\u5728\u5404\u79cd\u5404\u6837\u7684\u96c6\u7fa4\u73af\u5883\u4e2d\u3002"],["ul",["li",["p","\u65e0\u754c\u6570\u636e\u6d41\u662f\u6307\u6570\u636e\u4ea7\u751f\u6709\u4e00\u4e2a\u5f00\u59cb\u4f46\u6ca1\u6709\u7ec8\u6b62\u6761\u4ef6\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u7ec8\u6b62\u7684\u8fb9\u754c\uff0c\u6240\u4ee5\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e0d\u80fd\u7b49\u5f85\u6240\u6709\u6570\u636e\u8f93\u5165\u5b8c\u6bd5\u624d\u53bb\u5904\u7406\uff0c\u5904\u7406\u65f6\u662f\u901a\u8fc7\u4ea7\u751f\u6570\u636e\u7684\u4e8b\u4ef6\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u53bb\u6301\u7eed\u5904\u7406\u6d41\u4e2d\u7684\u6570\u636e\u3002"]],["li",["p","\u6709\u754c\u6570\u636e\u662f\u6307\u5b9a\u4e49\u4e86\u6570\u636e\u6d41\u7684\u5f00\u59cb\u548c\u7ed3\u675f\uff0c\u5904\u7406\u6709\u754c\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u7b49\u5230\u6240\u6709\u6570\u636e\u90fd\u83b7\u53d6\u5230\u7684\u60c5\u51b5\u4e0b\u518d\u8fdb\u884c\u540e\u7eed\u8ba1\u7b97\uff0c\u4e0d\u9700\u8981\u8fd9\u4e9b\u6570\u636e\u662f\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u8fdb\u5165\u5230\u5904\u7406\u961f\u5217\uff0c\u56e0\u4e3a\u5f53\u4f60\u83b7\u5f97\u8fd9\u4e9b\u6570\u636e\u65f6\u4f60\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002"]]],["h2","\u5b89\u88c5Flink"],["p","\u5b89\u88c5Flink\u53ea\u9700\u8981\u4e0b\u8f7d\u5176\u4e8c\u8fdb\u5236\u5305\uff0c\u5e76\u89e3\u538b\u5230\u672c\u5730\u76ee\u5f55\u5373\u53ef"],["pre",{lang:null,highlighted:'$ curl https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>dyn<span class="token operator">/</span>closer<span class="token punctuation">.</span>lua<span class="token operator">/</span>flink<span class="token operator">/</span>flink<span class="token operator">-</span><span class="token number">1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>flink<span class="token operator">-</span><span class="token number">1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>bin<span class="token operator">-</span>scala_2<span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">.</span>tgz\n$ cd ~<span class="token operator">/</span>Downloads        # Go <span class="token keyword">to</span> download directory\n$ tar xzf flink<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">.</span>tgz   # Unpack the downloaded archive\n$ cd flink<span class="token operator">-</span><span class="token number">1.8</span><span class="token punctuation">.</span><span class="token number">0</span>'},["code","$ curl https://www.apache.org/dyn/closer.lua/flink/flink-1.8.0/flink-1.8.0-bin-scala_2.12.tgz\n$ cd ~/Downloads        # Go to download directory\n$ tar xzf flink-*.tgz   # Unpack the downloaded archive\n$ cd flink-1.8.0"]],["h2","\u542f\u52a8Flink \u96c6\u7fa4"],["p","\u5b89\u88c5\u597dFlink\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u542f\u52a8",["code","Flink"],"\u96c6\u7fa4"],["pre",{lang:null,highlighted:'bin<span class="token operator">/</span>start<span class="token operator">-</span>cluster<span class="token punctuation">.</span>sh'},["code","bin/start-cluster.sh"]],["p","\u542f\u52a8\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7",["code","http://localhost:8081"],"\u67e5\u770b",["code","Flink Dashboad"],"\u5982\u4e0b\u56fe"],["p",["img",{title:null,src:"./assets/flink-dashboard.png",alt:"Flink Dashboard"}]],["h2","\u7f16\u5199Flink \u4efb\u52a1"],["p","\u63a5\u4e0b\u6765\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684Flink \u4efb\u52a1\u7528\u6765\u7edf\u8ba1\u5355\u8bcd\u7684\u4e2a\u6570."],["ul",["li",["p","Step 1 \u901a\u8fc7Gradle init\u6765\u521b\u5efa\u4e00\u4e2ajava\u5e94\u7528"]]],["pre",{lang:null,highlighted:'gradle init\nStarting a Gradle Daemon <span class="token punctuation">(</span>subsequent builds will be faster<span class="token punctuation">)</span>\n\n<span class="token keyword">Select</span> type of project <span class="token keyword">to</span> generate<span class="token punctuation">:</span>\n  <span class="token number">1</span><span class="token punctuation">:</span> basic\n  <span class="token number">2</span><span class="token punctuation">:</span> cpp<span class="token operator">-</span>application\n  <span class="token number">3</span><span class="token punctuation">:</span> cpp<span class="token operator">-</span>library\n  <span class="token number">4</span><span class="token punctuation">:</span> groovy<span class="token operator">-</span>application\n  <span class="token number">5</span><span class="token punctuation">:</span> groovy<span class="token operator">-</span>library\n  <span class="token number">6</span><span class="token punctuation">:</span> java<span class="token operator">-</span>application\n  <span class="token number">7</span><span class="token punctuation">:</span> java<span class="token operator">-</span>library\n  <span class="token number">8</span><span class="token punctuation">:</span> kotlin<span class="token operator">-</span>application\n  <span class="token number">9</span><span class="token punctuation">:</span> kotlin<span class="token operator">-</span>library\n  <span class="token number">10</span><span class="token punctuation">:</span> scala<span class="token operator">-</span>library\nEnter selection <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">:</span> basic<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token number">6</span>\n\n<span class="token keyword">Select</span> build script DSL<span class="token punctuation">:</span>\n  <span class="token number">1</span><span class="token punctuation">:</span> groovy\n  <span class="token number">2</span><span class="token punctuation">:</span> kotlin\nEnter selection <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">:</span> groovy<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">1</span>\n\n<span class="token keyword">Select</span> test framework<span class="token punctuation">:</span>\n  <span class="token number">1</span><span class="token punctuation">:</span> junit\n  <span class="token number">2</span><span class="token punctuation">:</span> testng\n  <span class="token number">3</span><span class="token punctuation">:</span> spock\nEnter selection <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">:</span> junit<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">1</span>\n\nProject name <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">:</span> flink<span class="token operator">-</span>example<span class="token punctuation">)</span><span class="token punctuation">:</span>\nSource package <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">:</span> flink<span class="token punctuation">.</span>example<span class="token punctuation">)</span><span class="token punctuation">:</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jetqin\n\nBUILD SUCCESSFUL <span class="token keyword">in</span> 40s'},["code","gradle init\nStarting a Gradle Daemon (subsequent builds will be faster)\n\nSelect type of project to generate:\n  1: basic\n  2: cpp-application\n  3: cpp-library\n  4: groovy-application\n  5: groovy-library\n  6: java-application\n  7: java-library\n  8: kotlin-application\n  9: kotlin-library\n  10: scala-library\nEnter selection (default: basic) [1..10] 6\n\nSelect build script DSL:\n  1: groovy\n  2: kotlin\nEnter selection (default: groovy) [1..2] 1\n\nSelect test framework:\n  1: junit\n  2: testng\n  3: spock\nEnter selection (default: junit) [1..3] 1\n\nProject name (default: flink-example):\nSource package (default: flink.example): io.github.jetqin\n\nBUILD SUCCESSFUL in 40s"]],["ul",["li",["p","Step 2 \u901a\u8fc7idea\u7f16\u8f91"]]],["pre",{lang:null,highlighted:'idea build<span class="token punctuation">.</span>gradle'},["code","idea build.gradle"]],["p","\u6dfb\u52a0\u5982\u4e0b\u4f9d\u8d56"],["pre",{lang:null,highlighted:'plugins {\n    <span class="token operator">/</span><span class="token operator">/</span> Apply the java plugin <span class="token keyword">to</span> add support <span class="token keyword">for</span> Java\n    id <span class="token string">\'java\'</span>\n\n    <span class="token operator">/</span><span class="token operator">/</span> Apply the application plugin <span class="token keyword">to</span> add support <span class="token keyword">for</span> building an application\n    id <span class="token string">\'application\'</span>\n}\n\nrepositories {\n    <span class="token operator">/</span><span class="token operator">/</span> Use jcenter <span class="token keyword">for</span> resolving your dependencies<span class="token punctuation">.</span>\n    <span class="token operator">/</span><span class="token operator">/</span> You can declare any Maven<span class="token operator">/</span>Ivy<span class="token operator">/</span>file repository here<span class="token punctuation">.</span>\n    <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n}\n\next {\n    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">\'flinkVersion\'</span><span class="token punctuation">,</span> <span class="token string">\'1.8.0\'</span><span class="token punctuation">)</span>\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> \u6307\u5b9a\u8fd0\u884c\u7684\u4e3b\u7c7b\n\njar {        \n    manifest {\n        attributes <span class="token string">\'Main-Class\'</span><span class="token punctuation">:</span> <span class="token string">\'io.github.jetqin.App\'</span>\n    }\n}\n\ndependencies {\n    <span class="token operator">/</span><span class="token operator">/</span> add flink dependencies\n    implementation <span class="token string">"com.google.guava:guava:27.0.1-jre"</span>\n    implementation <span class="token string">"org.apache.flink:flink-java:${flinkVersion}"</span>\n    implementation <span class="token string">"org.apache.flink:flink-streaming-java_2.11:${flinkVersion}"</span>\n    implementation <span class="token string">"org.apache.flink:flink-clients_2.11:${flinkVersion}"</span>\n    implementation <span class="token string">"org.apache.flink:flink-connector-wikiedits_2.11:${flinkVersion}"</span>\n\n    <span class="token operator">/</span><span class="token operator">/</span> Use JUnit test framework\n    testImplementation <span class="token string">\'junit:junit:4.12\'</span>\n}\n\n<span class="token operator">/</span><span class="token operator">/</span> Define the main class <span class="token keyword">for</span> the application\nmainClassName <span class="token operator">=</span> <span class="token string">\'io.github.jetqin.App\'</span>'},["code","plugins {\n    // Apply the java plugin to add support for Java\n    id 'java'\n\n    // Apply the application plugin to add support for building an application\n    id 'application'\n}\n\nrepositories {\n    // Use jcenter for resolving your dependencies.\n    // You can declare any Maven/Ivy/file repository here.\n    jcenter()\n}\n\next {\n    set('flinkVersion', '1.8.0')\n}\n\n// \u6307\u5b9a\u8fd0\u884c\u7684\u4e3b\u7c7b\n\njar {        \n    manifest {\n        attributes 'Main-Class': 'io.github.jetqin.App'\n    }\n}\n\ndependencies {\n    // add flink dependencies\n    implementation \"com.google.guava:guava:27.0.1-jre\"\n    implementation \"org.apache.flink:flink-java:${flinkVersion}\"\n    implementation \"org.apache.flink:flink-streaming-java_2.11:${flinkVersion}\"\n    implementation \"org.apache.flink:flink-clients_2.11:${flinkVersion}\"\n    implementation \"org.apache.flink:flink-connector-wikiedits_2.11:${flinkVersion}\"\n\n    // Use JUnit test framework\n    testImplementation 'junit:junit:4.12'\n}\n\n// Define the main class for the application\nmainClassName = 'io.github.jetqin.App'"]],["p","Step 3: \u7f16\u5199Java\u6587\u4ef6"],["pre",{lang:null,highlighted:'package io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jetqin<span class="token comment" spellcheck="true">;</span>\n\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>FlatMapFunction<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>ReduceFunction<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ParameterTool<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span>DataStream<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span>StreamExecutionEnvironment<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Time<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collector<span class="token comment" spellcheck="true">;</span>\n\npublic class App {\n\n    public <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws Exception{\n        <span class="token operator">/</span><span class="token operator">/</span> the port <span class="token keyword">to</span> connect <span class="token keyword">to</span>\n        final int port<span class="token comment" spellcheck="true">;</span>\n        try {\n            final ParameterTool params <span class="token operator">=</span> ParameterTool<span class="token punctuation">.</span><span class="token function">fromArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            port <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        } catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> {\n            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No port specified. Please run \'SocketWindowWordCount --port &lt;port>\'"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            return<span class="token comment" spellcheck="true">;</span>\n        }\n\n        <span class="token operator">/</span><span class="token operator">/</span> get the execution environment\n        final StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> get input data by connecting <span class="token keyword">to</span> the socket\n        DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> text <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token string">"\\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> parse the data<span class="token punctuation">,</span> group it<span class="token punctuation">,</span> window it<span class="token punctuation">,</span> <span class="token operator">and</span> aggregate the counts\n        DataStream<span class="token operator">&lt;</span>WordWithCount<span class="token operator">></span> windowCounts <span class="token operator">=</span> text\n                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>new FlatMapFunction<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> WordWithCount<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n                    <span class="token variable">@Override</span>\n                    public void <span class="token function">flatMap</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>WordWithCount<span class="token operator">></span> out<span class="token punctuation">)</span> {\n                        <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token punctuation">:</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\\\s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> {\n                            out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>new <span class="token function">WordWithCount</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> 1L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                        }\n                    }\n                }<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>new ReduceFunction<span class="token operator">&lt;</span>WordWithCount<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n                    <span class="token variable">@Override</span>\n                    public WordWithCount <span class="token function">reduce</span><span class="token punctuation">(</span>WordWithCount a<span class="token punctuation">,</span> WordWithCount b<span class="token punctuation">)</span> {\n                        return new <span class="token function">WordWithCount</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>word<span class="token punctuation">,</span> a<span class="token punctuation">.</span>count <span class="token operator">+</span> b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n                    }\n                }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        <span class="token operator">/</span><span class="token operator">/</span> print the results <span class="token keyword">with</span> a single thread<span class="token punctuation">,</span> rather than <span class="token keyword">in</span> parallel\n        windowCounts<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"Socket Window WordCount"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n\n    <span class="token operator">/</span><span class="token operator">/</span> Data type <span class="token keyword">for</span> words <span class="token keyword">with</span> count\n    public <span class="token keyword">static</span> class WordWithCount {\n\n        public String word<span class="token comment" spellcheck="true">;</span>\n        public long count<span class="token comment" spellcheck="true">;</span>\n\n        public <span class="token function">WordWithCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {}\n\n        public <span class="token function">WordWithCount</span><span class="token punctuation">(</span>String word<span class="token punctuation">,</span> long count<span class="token punctuation">)</span> {\n            this<span class="token punctuation">.</span>word <span class="token operator">=</span> word<span class="token comment" spellcheck="true">;</span>\n            this<span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token comment" spellcheck="true">;</span>\n        }\n\n        <span class="token variable">@Override</span>\n        public String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n            return word <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> count<span class="token comment" spellcheck="true">;</span>\n        }\n    }\n}'},["code",'package io.github.jetqin;\n\nimport org.apache.flink.api.common.functions.FlatMapFunction;\nimport org.apache.flink.api.common.functions.ReduceFunction;\nimport org.apache.flink.api.java.utils.ParameterTool;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.api.windowing.time.Time;\nimport org.apache.flink.util.Collector;\n\npublic class App {\n\n    public static void main(String[] args) throws Exception{\n        // the port to connect to\n        final int port;\n        try {\n            final ParameterTool params = ParameterTool.fromArgs(args);\n            port = params.getInt("port");\n        } catch (Exception e) {\n            System.err.println("No port specified. Please run \'SocketWindowWordCount --port <port>\'");\n            return;\n        }\n\n        // get the execution environment\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n        // get input data by connecting to the socket\n        DataStream<String> text = env.socketTextStream("localhost", port, "\\n");\n\n        // parse the data, group it, window it, and aggregate the counts\n        DataStream<WordWithCount> windowCounts = text\n                .flatMap(new FlatMapFunction<String, WordWithCount>() {\n                    @Override\n                    public void flatMap(String value, Collector<WordWithCount> out) {\n                        for (String word : value.split("\\\\s")) {\n                            out.collect(new WordWithCount(word, 1L));\n                        }\n                    }\n                })\n                .keyBy("word")\n                .timeWindow(Time.seconds(5), Time.seconds(1))\n                .reduce(new ReduceFunction<WordWithCount>() {\n                    @Override\n                    public WordWithCount reduce(WordWithCount a, WordWithCount b) {\n                        return new WordWithCount(a.word, a.count + b.count);\n                    }\n                });\n\n        // print the results with a single thread, rather than in parallel\n        windowCounts.print().setParallelism(1);\n\n        env.execute("Socket Window WordCount");\n    }\n\n    // Data type for words with count\n    public static class WordWithCount {\n\n        public String word;\n        public long count;\n\n        public WordWithCount() {}\n\n        public WordWithCount(String word, long count) {\n            this.word = word;\n            this.count = count;\n        }\n\n        @Override\n        public String toString() {\n            return word + " : " + count;\n        }\n    }\n}']],["h2","\u8fd0\u884cFlink \u4efb\u52a1"],["p","\u63a5\u4e0b\u6765\u8fd0\u884cFlink\u4efb\u52a1\uff0c\u9996\u5148\u9700\u8981\u5c06\u7f16\u5199\u7684java\u5e94\u7528\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6"],["ul",["li",["p","Step 1 \u6253\u5305\u5e94\u7528\u5e76\u901a\u8fc7flink \u547d\u4ee4\u6267\u884c\u6b64\u4efb\u52a1"]]],["pre",{lang:null,highlighted:'gradle clean jar\n\nflink run build<span class="token operator">/</span>libs<span class="token operator">/</span>flink<span class="token operator">-</span>example<span class="token punctuation">.</span>jar <span class="token operator">-</span><span class="token operator">-</span>port <span class="token number">9000</span>'},["code","gradle clean jar\n\nflink run build/libs/flink-example.jar --port 9000"]],["ul",["li",["p","Step 2\n\u6a21\u62df\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u4e0d\u95f4\u65ad\u8f93\u5165\u5355\u8bcd"]]],["pre",{lang:null,highlighted:'nc <span class="token operator">-</span>l <span class="token number">9000</span>\nflink\ni love apache flink\nflink is a powerful platform'},["code","nc -l 9000\nflink\ni love apache flink\nflink is a powerful platform"]],["p",["img",{title:null,src:"./assets/flink-job.png",alt:"Flink Job"}]],["h2","\u8f93\u51fa\u7ed3\u679c"],["p"," \u67e5\u770b\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u67e5\u770b"],["pre",{lang:null,highlighted:'tail <span class="token operator">-</span>f log<span class="token operator">/</span>flink<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>taskexecutor<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">.</span>out'},["code","tail -f log/flink-*-taskexecutor-*.out"]],["p"," \u4e5f\u53ef\u4ee5\u5728dashboard\u4e2djob manager\u4e2d\u67e5\u770b\n ",["img",{title:null,src:"./assets/flink-result.png",alt:"Flink Result"}]]],meta:{order:6,title:"Apache Flink \u5165\u95e8",type:"\u5165\u95e8",filename:"docs/distribution/flink-starter.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#\u7b80\u4ecb",title:"\u7b80\u4ecb"},"\u7b80\u4ecb"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u5b89\u88c5Flink",title:"\u5b89\u88c5Flink"},"\u5b89\u88c5Flink"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u542f\u52a8Flink-\u96c6\u7fa4",title:"\u542f\u52a8Flink \u96c6\u7fa4"},"\u542f\u52a8Flink \u96c6\u7fa4"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u7f16\u5199Flink-\u4efb\u52a1",title:"\u7f16\u5199Flink \u4efb\u52a1"},"\u7f16\u5199Flink \u4efb\u52a1"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u8fd0\u884cFlink-\u4efb\u52a1",title:"\u8fd0\u884cFlink \u4efb\u52a1"},"\u8fd0\u884cFlink \u4efb\u52a1"]],["li",["a",{className:"bisheng-toc-h2",href:"#\u8f93\u51fa\u7ed3\u679c",title:"\u8f93\u51fa\u7ed3\u679c"},"\u8f93\u51fa\u7ed3\u679c"]]]}}});